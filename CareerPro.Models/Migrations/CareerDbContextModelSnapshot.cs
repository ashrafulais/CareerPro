// <auto-generated />
using System;
using CareerPro.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CareerPro.Model.Migrations
{
    [DbContext(typeof(CareerDbContext))]
    partial class CareerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CareerPro.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "userid1",
                            AccessFailedCount = 0,
                            ActiveUser = true,
                            Address = "Mirpur-2, Dhaka",
                            ConcurrencyStamp = "290eb678-df97-4c87-b2c1-acb95f19d843",
                            DateAdded = new DateTime(2020, 12, 19, 11, 8, 6, 789, DateTimeKind.Utc).AddTicks(6615),
                            Email = "johnsmith@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            ProfilePicUrl = "img/featured-listing-2.jpg",
                            SecurityStamp = "35873d34-9411-45b0-a513-5f3d20d7f8b5",
                            TwoFactorEnabled = false,
                            UserName = "johnsmith",
                            UserType = 0
                        },
                        new
                        {
                            Id = "userid2",
                            AccessFailedCount = 0,
                            ActiveUser = true,
                            Address = "Banani, Dhaka",
                            ConcurrencyStamp = "28827232-1c8d-4a8e-b990-6befc261b172",
                            DateAdded = new DateTime(2020, 12, 19, 11, 8, 6, 789, DateTimeKind.Utc).AddTicks(9131),
                            Email = "doesup@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "9123456789",
                            PhoneNumberConfirmed = false,
                            ProfilePicUrl = "img/featured-listing-4.jpg",
                            SecurityStamp = "36cca7d3-dfd7-4b4e-9805-677b7d169080",
                            TwoFactorEnabled = false,
                            UserName = "doesup",
                            UserType = 0
                        },
                        new
                        {
                            Id = "userid4",
                            AccessFailedCount = 0,
                            ActiveUser = true,
                            Address = "Headquarter: Kualalampur, Malaysia, Regional office: Dhaka, Bangladesh",
                            ConcurrencyStamp = "2c1adcc6-9e10-4f6e-b26e-c22137abff20",
                            DateAdded = new DateTime(2020, 12, 19, 11, 8, 6, 789, DateTimeKind.Utc).AddTicks(9180),
                            Email = "abccorp@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "79746565421",
                            PhoneNumberConfirmed = false,
                            ProfilePicUrl = "img/featured-listing-1.jpg",
                            SecurityStamp = "2adab955-a68e-422d-8b9a-862fc088bad7",
                            TwoFactorEnabled = false,
                            UserName = "abccorp",
                            UserType = 1
                        },
                        new
                        {
                            Id = "userid5",
                            AccessFailedCount = 0,
                            ActiveUser = true,
                            Address = "Dhaka, Bangladesh",
                            ConcurrencyStamp = "c6e9de0d-672a-4300-8ad5-e977e0b3578e",
                            DateAdded = new DateTime(2020, 12, 19, 11, 8, 6, 789, DateTimeKind.Utc).AddTicks(9189),
                            Email = "smartsoftware@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "6546541166",
                            PhoneNumberConfirmed = false,
                            ProfilePicUrl = "img/featured-listing-5.jpg",
                            SecurityStamp = "59d07940-6999-4632-9e8b-8823ec3d72ae",
                            TwoFactorEnabled = false,
                            UserName = "smartsoftware",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("CareerPro.Model.Job", b =>
                {
                    b.Property<string>("JobID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PostedByID");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobID = "job1",
                            Address = "Dhaka, Bangladesh",
                            CategoryID = "programmer",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 791, DateTimeKind.Utc).AddTicks(5498),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 791, DateTimeKind.Unspecified).AddTicks(6006),
                            Description = "We are looking for an experienced Software Engineer who has efficient Codign skill and experienced in ASP.NET Core Tech.",
                            PostedByID = "userid1",
                            Salary = 60000m,
                            Title = "Software Engineer"
                        },
                        new
                        {
                            JobID = "job2",
                            Address = "Khulna, Bangladesh",
                            CategoryID = "IT",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(364),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(380),
                            Description = "We are looking for an experienced Digital Marketing Specialist who has efficient skill and experienced in Digital Marketing.",
                            PostedByID = "userid4",
                            Salary = 50000m,
                            Title = "Digital Marketing Specialist"
                        },
                        new
                        {
                            JobID = "job3",
                            Address = "Dhaka, Bangladesh",
                            CategoryID = "programmer",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(515),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(516),
                            Description = "We are looking for an experienced Data Engineer who has efficient Codign skill and experienced in Big Data.",
                            PostedByID = "userid2",
                            Salary = 80000m,
                            Title = "Data Engineer"
                        },
                        new
                        {
                            JobID = "job4",
                            Address = "Khulna, Bangladesh",
                            CategoryID = "IT",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(520),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(521),
                            Description = "We are looking for an experienced Digital Marketing Intern who has skill and experienced in Digital Marketing.",
                            PostedByID = "userid5",
                            Salary = 10000m,
                            Title = "Digital Marketing Intern"
                        },
                        new
                        {
                            JobID = "job5",
                            Address = "Dhaka, Bangladesh",
                            CategoryID = "programmer",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(523),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(524),
                            Description = "We are looking for an experienced Support Engineer who has efficient Codign skill and experienced in ASP.NET Core Tech.",
                            PostedByID = "userid2",
                            Salary = 60000m,
                            Title = "Support Engineer"
                        },
                        new
                        {
                            JobID = "job6",
                            Address = "Khulna, Bangladesh",
                            CategoryID = "engg",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(526),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(526),
                            Description = "We are looking for an experienced Mechanical Engineer who has efficient skill and experienced in the field.",
                            PostedByID = "userid5",
                            Salary = 50000m,
                            Title = "Mechanical Engineer"
                        },
                        new
                        {
                            JobID = "job7",
                            Address = "Dhaka, Bangladesh",
                            CategoryID = "engg",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(528),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(529),
                            Description = "We are looking for an experienced Technical Engineer who has efficient Codign skill and experienced in the Tech.",
                            PostedByID = "userid1",
                            Salary = 60000m,
                            Title = "Technical Engineer"
                        },
                        new
                        {
                            JobID = "job8",
                            Address = "Khulna, Bangladesh",
                            CategoryID = "analyst",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(531),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(532),
                            Description = "We are looking for an experienced Data analyst who has efficient skill and experienced in the field.",
                            PostedByID = "userid2",
                            Salary = 50000m,
                            Title = "Data analyst"
                        },
                        new
                        {
                            JobID = "job9",
                            Address = "Dhaka, Bangladesh",
                            CategoryID = "IT",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(534),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(535),
                            Description = "We are looking for an experienced Software Engineer who has efficient Codign skill and experienced in ASP.NET Core Tech.",
                            PostedByID = "userid4",
                            Salary = 60000m,
                            Title = "Support Engineer"
                        },
                        new
                        {
                            JobID = "job10",
                            Address = "Khulna, Bangladesh",
                            CategoryID = "IT",
                            DatePublished = new DateTime(2020, 12, 19, 11, 8, 6, 792, DateTimeKind.Utc).AddTicks(537),
                            Deadline = new DateTime(2021, 5, 19, 11, 8, 6, 792, DateTimeKind.Unspecified).AddTicks(538),
                            Description = "We are looking for an experienced Marketing Specialist who has efficient skill and experienced in Marketing.",
                            PostedByID = "userid1",
                            Salary = 50000m,
                            Title = "Product Marketing Specialist"
                        });
                });

            modelBuilder.Entity("CareerPro.Model.JobCategory", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = "IT",
                            CategoryName = "IT"
                        },
                        new
                        {
                            CategoryID = "programmer",
                            CategoryName = "Computer Programming"
                        },
                        new
                        {
                            CategoryID = "engg",
                            CategoryName = "Engineering"
                        },
                        new
                        {
                            CategoryID = "analyst",
                            CategoryName = "Data Analysis"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CareerPro.Model.Job", b =>
                {
                    b.HasOne("CareerPro.Model.JobCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CareerPro.Model.AppUser", "PostedByUser")
                        .WithMany()
                        .HasForeignKey("PostedByID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CareerPro.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CareerPro.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CareerPro.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CareerPro.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
